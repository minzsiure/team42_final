locations = {
    'Student Center': [(42.357307, -71.095863), (42.359075, -71.09773), (42.360295, -71.095102), (42.35934, -71.0939), (42.358306, -71.093289)],
    'Dorm Row': [(42.358147, -71.093117), (42.357069, -71.092559), (42.353866, -71.102987), (42.353517, -71.106292)],
    'Simmons/Briggs': [(42.359035, -71.097859), (42.357243, -71.095928), (42.35358, -71.106356), (42.354468, -71.108159)],
    'Boston FSILG (West)': [(42.353342, -71.124664), (42.344906, -71.125737), (42.348014, -71.092478), (42.350266, -71.092607)],
    'Boston FSILG (East)': [(42.351392, -71.092409), (42.343589, -71.090842), (42.3509, -71.080478), (42.353771, -71.081766)],
    'Stata/North Court': [(42.361802, -71.091636), (42.360811, -71.09095), (42.361112, -71.088353), (42.362476, -71.088267), (42.362618, -71.089769)],
    'East Campus': [(42.358306, -71.089426), (42.360716, -71.090885), (42.361017, -71.08831), (42.359162, -71.08713)],
    'Vassar Academic Buildings': [(42.360359, -71.094973), (42.36177, -71.091776), (42.360636, -71.090928), (42.359574, -71.09404)],
    'Infinite Corridor/Killian': [(42.359542, -71.093932), (42.35718, -71.092259), (42.358274, -71.089619), (42.360541, -71.090928)],
    'Kendall Square': [(42.364188, -71.088117), (42.361112, -71.088225), (42.362032, -71.082774)],
    'Sloan/Media Lab': [(42.361017, -71.088203), (42.359178, -71.087044), (42.361619, -71.080071), (42.361905, -71.082796)],
    'North Campus': [(42.355325, -71.11022), (42.363934, -71.10128), (42.362666, -71.08995), (42.354484, -71.108361)],
    'Technology Square': [(42.363157, -71.09361), (42.365837, -71.09213), (42.364188, -71.088182), (42.36265, -71.088267)],
    # "my apartment": [(42.366340, -71.081978), (42.365806904694445, -71.08227304312109), (42.365811085357144, -71.08187392189215), (42.36626393044539, -71.08177787020576)]
}

tour = {
    'Student Center': [(42.35893435976095, -71.09415485384545), (42.358679267013166, -71.0950996513372), (42.35907868809375, -71.09536537563176), (42.35939251716167, -71.09443874732254)],
    "Kresge Auditorium": [(42.3584283565754, -71.09491417777733), (42.35800068789369, -71.09462259167158), (42.35784616058056, -71.09523521703144), (42.35828580067126, -71.09547231482696)],
    "MIT Chapel": [(42.358046531714415, -71.09429422520319), (42.358191175188196, -71.09384056334613), (42.35860638519277, -71.09410078562962), (42.35844642756507, -71.09441857921475), (42.35823882237726, -71.0944899676288), (42.358432814131156, -71.09380602056515)],
    "Killian Court": [(42.35990660466586, -71.09117603266722), (42.358551019015124, -71.08970181153568), (42.35825458879108, -71.09042303425633), (42.35785093688366, -71.09162649468112), (42.35932046964569, -71.09261657559796)],
    "Hayden Library": [(42.359023086477464, -71.08962615615349), (42.35928816534441, -71.08881216918246), (42.35909654217911, -71.0886940330203), (42.35882507502796, -71.0895296302649)],
    "McDermott Court": [(42.360495834552566, -71.08987669938122), (42.360581749561824, -71.08900466591487), (42.35972033323229, -71.08849368490124), (42.3595959808182, -71.08936265860106)],
    "Media Lab": [(42.360960871134, -71.08805145867707), (42.3601684428233, -71.08757433423418), (42.36040732559083, -71.0868764839976), (42.361145593892694, -71.08746486502764)],
    "Koch Institute": [(42.36256063071385, -71.08987920363494), (42.362192163308585, -71.08989365788251), (42.36211740154237, -71.08976718321607), (42.362055990024984, -71.08894329110318), (42.36231231596078, -71.0886252976561), (42.36246984908997, -71.08868311464647)],
    "Stata Center": [(42.362072776481696, -71.0898875508796), (42.361344045156535, -71.08989698848988), (42.36140332026907, -71.09031224334224), (42.36114878556667, -71.09060009045581), (42.36124292865895, -71.09116162826751), (42.36144864825861, -71.09138813091427), (42.36169620824046, -71.09156272671758), (42.362152971279414, -71.0904443698993)],
    "Barker Library": [(42.35986240880687, -71.09237826648659), (42.35999508929956, -71.09195929694505), (42.35952333516378, -71.09223195966256), (42.35968304399196, -71.09175479989514)],
    "MIT Museum": [(42.362573279777806, -71.0978549569529), (42.362550386303724, -71.09740569825468), (42.361988062728, -71.09748702957074), (42.362005232988025, -71.09774264227835), (42.362112547006774, -71.09792466950952)],
}


def within_area(point_coord, poly):
    new_poly = [(x - point_coord[0], y - point_coord[1]) for x, y in poly]
    total_cross = 0
    for i in range(len(poly)):
        x1, y1 = new_poly[i]
        if i == len(poly) - 1:
            x2, y2 = new_poly[0]
        else:
            x2, y2 = new_poly[i + 1]
        if sign(y1) != sign(y2):
            if sign(x1) == 1 and sign(x2) == 1:
                total_cross += 1
            elif sign(x1) != sign(x2):
                intersect = (x1 * y2 - y1 * x2) / (y2 - y1)
                if sign(intersect) == 1:
                    total_cross += 1
    if total_cross % 2 == 1:
        return True
    return False


def bounding_box(point_coord, box):
    x = [i[0] for i in box]
    y = [i[1] for i in box]
    min_x = min(x)
    min_y = min(y)
    max_x = max(x)
    max_y = max(y)
    if point_coord[0] >= min_x and point_coord[0] <= max_x and point_coord[1] >= min_y and point_coord[1] <= max_y:
        return True
    return False


def sign(x):
    if x > 0:
        return 1
    elif x == 0:
        return 0
    else:
        return -1


def get_area(point_coord, locations):
    for k, v in locations.items():
        if within_area(point_coord, v):
            return k
    return "Off Campus"


def request_handler(request):
   if 'lat' not in request['values'].keys() or 'lon' not in request['values'].keys():
      return "You must enter an lat and lon value."
   try:
      lat = float(request['values']['lat'])
      lon = float(request['values']['lon'])
   except ValueError:
      return "Both lat and lon must be valid floats."

   return get_area((lat, lon), tour)


# here_x, here_y = 42.361925, -71.089554
# print(get_area((here_x, here_y), tour))
# import matplotlib.pyplot as plt
# x = []
# y = []
# i = 0
# fig, ax = plt.subplots()
# for k, v in tour.items():
#    x = [i[0] for i in v]
#    y = [i[1] for i in v]
#    i += 1
#    ax.scatter(x, y, label = k)  
# ax.scatter([here_x], [here_y], label='me')
# plt.legend(loc = 'upper right')
# plt.show()


